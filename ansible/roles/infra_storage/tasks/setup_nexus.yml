---
- name: "Get user ID"
  ansible.builtin.shell: "id -u {{ USER_NAME }}"
  register: user_id

- name: "Get group ID"
  ansible.builtin.shell: "id -g {{ USER_NAME }}"
  register: group_id

- name: "Set correct owner of full nexus data directory"
  ansible.builtin.file:
    path: "/{{DATACORE}}/nexus"
    owner: "{{ user_id.stdout }}"
    group: "{{ group_id.stdout }}"
    mode: 0777
    recurse: yes

- name: "Remove previous nexus tmp directory"
  ansible.builtin.file:
     path: "/tmp/nexus"
     state: absent

- name: "Clone Nexus repository"
  ansible.builtin.git:
    repo: "https://github.com/sonatype/docker-nexus3.git"
    dest: "/tmp/nexus"
    accept_hostkey: yes
    force: yes
    recursive: no
    version: main
  become: true
  become_user: "{{ USER_NAME }}"

- name: "Alter dockerfile for arm (since java is downloaded for chef)"
  ansible.builtin.replace:
    path: "/tmp/nexus/Dockerfile"
    regexp: 'x86_64'
    replace: 'aarch64'
  when: ansible_architecture in ["armv7l", "aarch64"]

- name: "Build nexus image and with buildargs"
  community.general.docker_image:
     name: "nexus"
     tag: "{{ NEXUS_VERSION }}"
     source: "build"
     build:
       pull: yes
       path: "/tmp/nexus"
       dockerfile: "Dockerfile"
       args:
         NEXUS_VERSION: "{{ NEXUS_VERSION }}"
         NEXUS_DOWNLOAD_SHA256_HASH: "{{ NEXUS_SHA }}"

- name: "Launch nexus container {{ NEXUS_VERSION }}"
  community.general.docker_container:
    name: "nexus"
    image: "nexus:{{ NEXUS_VERSION }}"
    state: started
    restart_policy: always
    recreate: yes
    timeout: "{{ DOCKER_TIMEOUT }}"
    user: "{{ user_id.stdout }}:{{ group_id.stdout }}"
    ports:
      - "{{ NEXUS_PORT_CONFIG }}:8081"
    volumes:
      - "/{{ DATACORE }}/nexus:/nexus-data"

- name: "Wait for Nexus to start up"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}"
    status_code: "200,403"
    timeout: 40
  register: nexus_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: "{{ NEXUS_RESTART_DELAY }}"
  delay: 30
  until: nexus_service_status['status'] == 200 or nexus_service_status['status'] == 403

- name: "Ensure script engine is enabled"
  ansible.builtin.replace:
    path: "/{{ DATACORE }}/nexus/etc/nexus.properties"
    regexp: "nexus.scripts.allowCreation=false"
    replace: "nexus.scripts.allowCreation=true"

- name: "Ensure script engine is enabled"
  ansible.builtin.lineinfile:
    dest: "/{{ DATACORE }}/nexus/etc/nexus.properties"
    line: "nexus.scripts.allowCreation=true"

- name: "Read nexus admin password file content"
  ansible.builtin.shell: cat /{{ DATACORE }}/nexus/admin.password
  register: admin_password_file_content
  ignore_errors: yes
  no_log: true

- name: "Launch nexus container {{ NEXUS_VERSION }}"
  community.general.docker_container:
    name: "nexus"
    image: "nexus:{{ NEXUS_VERSION }}"
    state: started
    restart_policy: always
    recreate: yes
    timeout: "{{ DOCKER_TIMEOUT }}"
    user: "{{ user_id.stdout }}:{{ group_id.stdout }}"
    ports:
      - "{{ NEXUS_PORT_CONFIG }}:8081"
    volumes:
      - "/{{ DATACORE }}/nexus:/nexus-data"
      - "/usr/local/share/ca-certificates:/usr/local/share/ca-certificates/"

- name: "Wait for Nexus to start up"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}"
    status_code: "200,403"
    timeout: 40
  register: nexus_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: "{{ NEXUS_RESTART_DELAY }}"
  delay: 30
  until: nexus_service_status['status'] == 200 or nexus_service_status['status'] == 403

- name: "Use default password if by default"
  ansible.builtin.set_fact:
    current_nexus_admin_password: "{{ admin_password_file_content.stdout }}"
  no_log: true
  when: admin_password_file_content.failed == false

- name: "Check nexus connection with status API and defaut password"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}/service/rest/v1/status"
    user: 'admin'
    password: "{{ current_nexus_admin_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
  register: nexus_api_status
  ignore_errors: yes

- name: "Use new password if needed if default one doesn't works"
  ansible.builtin.set_fact:
    current_nexus_admin_password: "{{ NEXUS_ADMIN_PASS }}"
  no_log: true
  when: nexus_api_status.failed == true

- name: "Removing (potential) previously declared Groovy scripts"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}/service/rest/v1/script/{{ item }}"
    user: 'admin'
    password: "{{ current_nexus_admin_password }}"
    method: DELETE
    force_basic_auth: yes
    status_code: 204,404,405
  with_items:
    - bypass_wizard
    - setup_realm
    - setup_truststore
    - setup_repositories_clean
    - setup_repositories_docker
    - setup_repositories_pypi
    - setup_repositories_raw
    - setup_repositories_npm
    - setup_role
    - setup_user
    - setup_ldap

- name: "Declaring up-to-date Groovy scripts"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}/service/rest/v1/script"
    user: 'admin'
    password: "{{ current_nexus_admin_password }}"
    body_format: json
    method: POST
    force_basic_auth: yes
    status_code: 204
    body:
      name: "{{ item }}"
      type: 'groovy'
      content: "{{ lookup('file', 'files/nexus/' + item + '.groovy') }}"
  with_items:
    - bypass_wizard
    - setup_realm
    - setup_truststore
    - setup_repositories_clean
    - setup_repositories_docker
    - setup_repositories_pypi
    - setup_repositories_raw
    - setup_repositories_npm
    - setup_role
    - setup_user
    - setup_ldap

- name: "Execute Groovy scripts"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}/service/rest/v1/script/{{ item }}/run"
    user: 'admin'
    password: "{{ current_nexus_admin_password }}"
    body_format: json
    method: POST
    force_basic_auth: yes
    status_code: 200,204
    body:
      admin_name: "{{ DEFAULT_ADMIN_NAME }}"
      admin_email: "{{ USER_MAIL }}"
      admin_password: "{{ NEXUS_ADMIN_PASS }}"
      docker_push_port: "{{ NEXUS_DOCKER_PUSH_PORT }}"
      docker_pull_port: "{{ NEXUS_DOCKER_PULL_PORT }}"
  with_items:
    - setup_realm
    - setup_truststore
    - setup_repositories_clean
    - setup_repositories_docker
    - setup_repositories_pypi
    - setup_repositories_raw
    - setup_repositories_npm

- name: "Execute Groovy script for roles"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}/service/rest/v1/script/setup_role/run"
    user: 'admin'
    password: "{{ current_nexus_admin_password }}"
    body_format: json
    method: POST
    force_basic_auth: yes
    status_code: 200,204
    body: "{{ item }}"
  when: item.id | length > 0
  with_items:
    - {
        state: "present",
        id: "deployment",
        name: "deployment",
        description: "Internal roles to deploy on custom repositories",
        privileges: ["nx-repository-view-docker-docker-internal-*",
                     "nx-repository-view-pypi-pypi-internal-*",
                     "nx-repository-view-npm-npm-internal-*",
                     "nx-repository-view-raw-artifacts-*",
                     "nx-component-upload"],
        roles: []
      }
    - {
        state: "present",
        id: "{{ LDAP_CONFIGURATION.ldap_access_group }}",
        name: "{{ LDAP_CONFIGURATION.ldap_access_group }}",
        description: "External roles to access custom repositories",
        privileges: ["nx-repository-view-docker-docker-internal-*",
                     "nx-repository-view-pypi-pypi-internal-*",
                     "nx-repository-view-npm-npm-internal-*",
                     "nx-repository-view-raw-artifacts-*"],
        roles: []
      }
    - {
        state: "present",
        id: "{{ LDAP_CONFIGURATION.ldap_admin_group }}",
        name: "{{ LDAP_CONFIGURATION.ldap_admin_group }}",
        description: "External roles to administrate Nexus",
        privileges: [],
        roles: ["nx-admin"]
      }

- name: "Execute Groovy script for ldap"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}/service/rest/v1/script/setup_ldap/run"
    user: 'admin'
    password: "{{ current_nexus_admin_password }}"
    body_format: json
    method: POST
    force_basic_auth: yes
    status_code: 200,204
    body: "{{ item }}"
  #no_log: true
  with_items:
    - {
        host: "{{ LDAP_CONFIGURATION.ldap_remotes.split(',')[0] }}",
        bind_name: "{{ LDAP_CONFIGURATION.ldap_username }}",
        bind_password: "{{ LDAP_CONFIGURATION.ldap_password }}",
        search_base: "{{ LDAP_CONFIGURATION.ldap_search }}",
        ldap_secure: "{{ LDAP_CONFIGURATION.ldap_secure }}",
      }
  when: configure_ldap is defined

- name: "Execute Groovy script for users"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}/service/rest/v1/script/setup_user/run"
    user: 'admin'
    password: "{{ current_nexus_admin_password }}"
    body_format: json
    method: POST
    force_basic_auth: yes
    status_code: 200,204
    body: "{{ item }}"
  no_log: true
  with_items:
    - {
        state: "present",
        username: "{{ NEXUS_DEPLOY.username }}",
        first_name: "nexus",
        last_name: "deploy",
        email: "deploy@{{ (DOMAIN_NAME |length > 0) | ternary(DOMAIN_NAME, DEFAULT_DOMAIN_NAME) }}",
        password: "{{ NEXUS_DEPLOY.password }}",
        roles: ["deployment"]
    }

- name: "Execute last groovy script"
  ansible.builtin.uri:
    url: "http://localhost:{{ NEXUS_PORT_CONFIG }}/service/rest/v1/script/{{ item }}/run"
    user: 'admin'
    password: "{{ current_nexus_admin_password }}"
    body_format: json
    method: POST
    force_basic_auth: yes
    status_code: 200,204
    body:
      admin_email: "{{ USER_MAIL }}"
      admin_name: "{{ DEFAULT_ADMIN_NAME }}"
      admin_password: "{{ NEXUS_ADMIN_PASS }}"
      anonymous_access: true
  with_items:
    - bypass_wizard

- name: "Ensure script engine is enabled"
  ansible.builtin.replace:
    path: "/{{ DATACORE }}/nexus/etc/nexus.properties"
    regexp: "nexus.scripts.allowCreation=true"
    replace: "nexus.scripts.allowCreation=false"

- name: "set nexus container final state ({{ NEXUS_DEFAULT_STATE }})"
  community.general.docker_container:
    name: "nexus"
    hostname: "nexus"
    image: "nexus:{{ NEXUS_VERSION }}"
    state: "{{ NEXUS_DEFAULT_STATE }}"
    restart_policy: always
    recreate: yes
    timeout: "{{ DOCKER_TIMEOUT }}"
    user: "{{ user_id.stdout }}:{{ group_id.stdout }}"
    ports:
  #      - "{{ NEXUS_PORT_CONFIG }}:8081"
  #      - "{{ NEXUS_DOCKER_PULL_PORT }}:{{ NEXUS_DOCKER_PULL_PORT }}"
  #      - "{{ NEXUS_DOCKER_PUSH_PORT }}:{{ NEXUS_DOCKER_PUSH_PORT }}"
    volumes:
      - "/{{ DATACORE }}/nexus:/nexus-data"
      - "/usr/local/share/ca-certificates:/usr/local/share/ca-certificates/"
    labels:
      traefik.enable: "true"
      traefik.http.services.nexus.loadbalancer.server.port: "8081"
      traefik.http.middlewares.https_redirect.redirectscheme.scheme: "https"
      traefik.http.routers.nexus_http.middlewares: "https_redirect"
      traefik.http.routers.nexus_http.rule: "Host(`{{ NEXUS_EXTERNAL_URL }}`)"
      traefik.http.routers.nexus_http.service: nexus
      traefik.http.routers.nexus_https.rule: "Host(`{{ NEXUS_EXTERNAL_URL }}`)"
      traefik.http.routers.nexus_https.service: nexus
      traefik.http.routers.nexus_https.tls: "true"
      # add this to use traefik as a proxy with tls (http will not be available)
      traefik.http.services.nexus_proxy.loadbalancer.server.port: "8081"
      traefik.http.routers.nexus_proxy.service: nexus_proxy
      traefik.http.routers.nexus_proxy.entrypoints: nexus
      traefik.http.routers.nexus_proxy.rule: "{{ global_proxy_rule }}"
      traefik.http.routers.nexus_proxy.tls: "true"
      # add this to use traefik as a proxy with tls (http will not be available)
      traefik.http.services.nexus_push_proxy.loadbalancer.server.port: "{{ NEXUS_DOCKER_PUSH_PORT }}"
      traefik.http.routers.nexus_push_proxy.service: nexus_push_proxy
      traefik.http.routers.nexus_push_proxy.entrypoints: nexus_docker_push
      traefik.http.routers.nexus_push_proxy.rule: "{{ global_proxy_rule }}"
      traefik.http.routers.nexus_push_proxy.tls: "true"
      # add this to use traefik as a proxy with tls (http will not be available)
      traefik.http.services.nexus_pull_proxy.loadbalancer.server.port: "{{ NEXUS_DOCKER_PULL_PORT }}"
      traefik.http.routers.nexus_pull_proxy.service: nexus_pull_proxy
      traefik.http.routers.nexus_pull_proxy.entrypoints: nexus_docker_pull
      traefik.http.routers.nexus_pull_proxy.rule: "{{ global_proxy_rule }}"
      traefik.http.routers.nexus_pull_proxy.tls: "true"

# Voir avec:
# https://blog.mimacom.com/automate-nexus/
# https://blog.savoirfairelinux.com/en-ca/2017/ansible-nexus-repository-manager/
# https://blog.savoirfairelinux.com/fr-ca/2017/ansible-nexus-repository-manager/
# https://github.com/savoirfairelinux/ansible-nexus3-oss/tree/master/tasks
# https://github.com/ansible-ThoTeam/nexus3-oss/blob/master/tasks/declare_script_each.yml
# https://github.com/sonatype-nexus-community/nexus-scripting-examples/blob/master/complex-script/npmAndBowerRepositories.groovy
# https://github.com/sonatype/nexus-public/blob/master/plugins/nexus-script-plugin/src/main/java/org/sonatype/nexus/script/plugin/RepositoryApi.java
