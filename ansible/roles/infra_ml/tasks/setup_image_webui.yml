---
- name: "Get user ID"
  ansible.builtin.shell: "id -u {{ USER_NAME }}"
  register: user_id

- name: "Get group ID"
  ansible.builtin.shell: "id -g {{ USER_NAME }}"
  register: group_id

- name: "Ensure libraries for download-models are present"
  ansible.builtin.pip:
    executable: pip3
    state: present
    name: [requests, tqdm]
    extra_args: --user
  become: true
  become_user: "{{ USER_NAME }}"

- name: "Set correct owner of full image_webui data directory"
  ansible.builtin.file:
    path: "/{{ DATACORE }}/{{ item }}"
    owner: "{{ user_id.stdout }}"
    group: "{{ group_id.stdout }}"
    state: directory
    recurse: true
  with_items:
    - image-webui
    - image-webui/data
    - image-webui/output

- name: "Remove previous image_webui tmp directory"
  ansible.builtin.file:
     path: "/tmp/image_webui"
     state: absent

- name: "Clone image_webui repository"
  ansible.builtin.git:
    repo: "https://github.com/AbdBarho/stable-diffusion-webui-docker.git"
    dest: "/tmp/image_webui"
    accept_hostkey: yes
    force: yes
    recursive: no
    version: "{{ IMAGE_WEBUI_VERSION }}"
  become: true
  become_user: "{{ USER_NAME }}"

- name: "Build image_webui image and with buildargs (Builkit is needed)"
  ansible.builtin.shell:
    cmd: docker build --build-arg TORCH_CUDA_ARCH_LIST="6.0 6.1 6.2" -t image_webui:{{ IMAGE_WEBUI_VERSION }} .
    chdir: "/tmp/image_webui/services/AUTOMATIC1111"
  when: IMAGE_WEBUI is defined and IMAGE_WEBUI == "auto"

- name: "Launch image_webui container final state ({{ IMAGE_WEBUI_DEFAULT_STATE }})"
  community.general.docker_container:
    name: "image_webui"
    hostname: "image_webui"
    image: "image_webui:{{ IMAGE_WEBUI_VERSION }}"
    state: "{{ IMAGE_WEBUI_DEFAULT_STATE }}"
    restart_policy: always
    recreate: yes
    timeout: "{{ DOCKER_TIMEOUT }}"
    env:
      CLI_ARGS: "--allow-code --medvram --xformers --enable-insecure-extension-access --api"
    ports:
  #      - "{{ IMAGE_WEBUI_PORT }}:7860"
    volumes:
      - "/{{ DATACORE }}/image-webui/data:/data"
      - "/{{ DATACORE }}/image-webui/output:/output"
    labels:
      traefik.enable: "true"
      traefik.http.services.image_webui.loadbalancer.server.port: "7860"
      traefik.http.middlewares.https_redirect.redirectscheme.scheme: "https"
      traefik.http.routers.image_webui_http.middlewares: "https_redirect"
      traefik.http.routers.image_webui_http.rule: "Host(`{{ IMAGE_WEBUI_EXTERNAL_URL }}`)"
      traefik.http.routers.image_webui_http.service: image_webui
      traefik.http.routers.image_webui_https.rule: "Host(`{{ IMAGE_WEBUI_EXTERNAL_URL }}`)"
      traefik.http.routers.image_webui_https.service: image_webui
      traefik.http.routers.image_webui_https.tls: "true"
      # add this to use traefik as a proxy with tls (http will not be available)
      traefik.http.services.image_webui_proxy.loadbalancer.server.port: "7860"
      traefik.http.routers.image_webui_proxy.service: image_webui_proxy
      traefik.http.routers.image_webui_proxy.entrypoints: image_webui
      traefik.http.routers.image_webui_proxy.rule: "{{ global_proxy_rule }}"
      traefik.http.routers.image_webui_proxy.tls: "true"
