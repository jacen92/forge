---
- name: "Get user ID"
  ansible.builtin.shell: "id -u {{ USER_NAME }}"
  register: user_id

- name: "Get group ID"
  ansible.builtin.shell: "id -g {{ USER_NAME }}"
  register: group_id

- name: "Set correct owner of full jenkins data directory"
  ansible.builtin.file:
    path: "/{{DATACORE}}/jenkins"
    owner: "{{ user_id.stdout }}"
    group: "{{ group_id.stdout }}"
    mode: 0777
    recurse: yes

- name: "Remove previous jenkins tmp directory"
  ansible.builtin.file:
     path: "/tmp/jenkins"
     state: absent

- name: "Clone jenkinsci"
  ansible.builtin.git:
    repo: "https://github.com/jenkinsci/docker.git"
    dest: "/tmp/jenkins"
    accept_hostkey: yes
    force: yes
    recursive: no
    version: "0d3c2a3a9442fb34e86426ea556ba5cf2a09ff45"

- name: "Use the correct base image for ARM arch"
  ansible.builtin.replace:
    path: "/tmp/jenkins/Dockerfile"
    regexp: 'FROM (.*)'
    replace: 'FROM arm64v8/openjdk:8-jre-stretch'
  when: ansible_architecture in ["aarch64"]

- name: "Build jenkins image and with buildargs"
  community.general.docker_image:
     name: "jenkins"
     tag: "{{ JENKINS_VERSION }}"
     source: "build"
     build:
       pull: yes
       path: "/tmp/jenkins"
       dockerfile: "Dockerfile"
       args:
         JENKINS_VERSION: "{{ JENKINS_VERSION }}"
         JENKINS_SHA: "{{ JENKINS_SHA_256 }}"
         uid: "{{ user_id.stdout }}"
         gid: "{{ group_id.stdout }}"
  become: true
  become_user: "{{ USER_NAME }}"

- name: "Launch jenkins container {{ JENKINS_VERSION }}"
  community.general.docker_container:
    name: "jenkins"
    image: "jenkins:{{ JENKINS_VERSION }}"
    state: started
    restart_policy: always
    recreate: no
    timeout: "{{ DOCKER_TIMEOUT }}"
    ports:
      - "{{ JENKINS_PORT_CONFIG }}:8080"
    volumes:
      - "/{{ DATACORE }}/jenkins:/var/jenkins_home"
  become: true
  become_user: "{{ USER_NAME }}"

- name: "Wait for Jenkins to start up"
  ansible.builtin.uri:
    url: "http://localhost:{{ JENKINS_PORT_CONFIG }}"
    status_code: "200,403"
    timeout: 40
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: "{{ JENKINS_RESTART_DELAY }}"
  delay: 30
  until: >
     'status' in jenkins_service_status and
     jenkins_service_status['status'] == 200 or jenkins_service_status['status'] == 403

- name: "Create jenkins init.groovy directory"
  ansible.builtin.file:
    path: "/{{ DATACORE }}/jenkins/init.groovy.d"
    state: directory

- name: "Copy all groovy files to customize jenkins installation"
  ansible.builtin.template:
    src: "files/jenkins/groovy/{{ item }}.j2"
    dest: "/{{ DATACORE }}/jenkins/init.groovy.d/{{ item }}"
    mode: u=rw,g=r,o=r
  with_items:
    - "00-basic-security.groovy"
    - "01-set-jenkins-url.groovy"
    - "02-disable-usage-stats.groovy"
    - "03-install-plugins.groovy"
    - "04-add-credentials.groovy"
    - "05-global-envvars.groovy"
    - "06-configure-mailer.groovy"

- name: "Copy ldap groovy files to customize jenkins installation"
  ansible.builtin.template:
    src: "files/jenkins/groovy/{{ item }}.j2"
    dest: "/{{ DATACORE }}/jenkins/init.groovy.d/{{ item }}"
    mode: u=rw,g=r,o=r
  with_items:
    - "07-configure-ldap.groovy"
  when: configure_ldap is defined

- name: "Set isSetupComplete to avoid getting started wizard"
  ansible.builtin.lineinfile:
    path: /{{ DATACORE }}/jenkins/config.xml
    regexp: "(.*)<isSetupComplete>false</isSetupComplete>(.*)"
    line: "<isSetupComplete>true</isSetupComplete>"

- name: "Set status name to avoid getting started wizard"
  ansible.builtin.lineinfile:
    path: /{{ DATACORE }}/jenkins/config.xml
    regexp: "(.*)<name>NEW</name>"
    line: "<name>RUNNING</name>"

- name: "Set status name to avoid getting started wizard"
  ansible.builtin.lineinfile:
    path: /{{ DATACORE }}/jenkins/config.xml
    regexp: "(.*)<installStateName>(.*)</installStateName>(.*)"
    line: "<installStateName>RUNNING</installStateName>"

- name: "Create file to avoid getting started wizard"
  ansible.builtin.copy:
    content: "{{ JENKINS_VERSION }}"
    dest: "/{{ DATACORE }}/jenkins/jenkins.install.UpgradeWizard.state"
    mode: u=rw,g=r,o=r

- name: "Set master executors to 1"
  ansible.builtin.lineinfile:
    path: /{{ DATACORE }}/jenkins/config.xml
    regexp: "(.*)<numExecutors>(.*)</numExecutors>(.*)"
    line: "<numExecutors>1</numExecutors>"

- name: "Bypass - jenkins.install.InstallUtil.lastExecVersion (Hack)"
  ansible.builtin.copy:
    src: "/{{ DATACORE }}/jenkins/jenkins.install.UpgradeWizard.state"
    dest: "/{{ DATACORE }}/jenkins/jenkins.install.InstallUtil.lastExecVersion"
    remote_src: true
    mode: u=rw,g=r,o=r

- name: "Register - initialAdminPassword"
  ansible.builtin.stat:
    path: "/{{ DATACORE }}/jenkins/secrets/initialAdminPassword"
  register: jenkinsAdminPassword

- name: "Bypass - initialAdminPassword"
  ansible.builtin.shell: "mv /{{ DATACORE }}/jenkins/secrets/initialAdminPassword /root"
  when: jenkinsAdminPassword.stat.exists == True

- name: "Copy theme configuration file"
  ansible.builtin.template:
    src: files/jenkins/config/theme-config.xml
    dest: /{{ DATACORE }}/jenkins/org.codefirst.SimpleThemeDecorator.xml

- name: "Set correct owner of full jenkins data directory for x86_64 image"
  ansible.builtin.file:
    path: "/{{DATACORE}}/jenkins"
    owner: "{{ user_id.stdout }}"
    group: "{{ group_id.stdout }}"
    recurse: yes

- name: "Restart jenkins container"
  community.general.docker_container:
    name: jenkins
    state: started
    restart: yes
  become: true
  become_user: "{{ USER_NAME }}"

- name: "Wait for Jenkins to start up"
  ansible.builtin.uri:
    url: "http://localhost:{{ JENKINS_PORT_CONFIG }}"
    status_code: "200,403"
    timeout: 40
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: "{{ JENKINS_RESTART_DELAY }}"
  delay: 30
  until: >
     'status' in jenkins_service_status and
     jenkins_service_status['status'] == 200 or jenkins_service_status['status'] == 403

- name: "set jenkins container final state ({{ JENKINS_DEFAULT_STATE }})"
  community.general.docker_container:
    name: "jenkins"
    hostname: "jenkins"
    image: "jenkins:{{ JENKINS_VERSION }}"
    state: "{{ JENKINS_DEFAULT_STATE }}"
    timeout: "{{ DOCKER_TIMEOUT }}"
    recreate: yes
    restart_policy: always
    volumes:
      - "/{{ DATACORE }}/jenkins:/var/jenkins_home"
      - "/usr/local/share/ca-certificates:/usr/local/share/ca-certificates/"
    ports:
      - "{{ JENKINS_JNLP_PORT }}:50000"
    labels:
      traefik.enable: "true"
      traefik.http.services.jenkins.loadbalancer.server.port: "8080"
      traefik.http.middlewares.https_redirect.redirectscheme.scheme: "https"
      traefik.http.routers.jenkins_http.middlewares: "https_redirect"
      traefik.http.routers.jenkins_http.rule: "Host(`{{ JENKINS_EXTERNAL_URL }}`)"
      traefik.http.routers.jenkins_http.service: jenkins
      traefik.http.routers.jenkins_https.rule: "Host(`{{ JENKINS_EXTERNAL_URL }}`)"
      traefik.http.routers.jenkins_https.service: jenkins
      traefik.http.routers.jenkins_https.tls: "true"
      # add this to use traefik as a proxy with tls (http will not be available)
      traefik.http.services.jenkins_proxy.loadbalancer.server.port: "8080"
      traefik.http.routers.jenkins_proxy.service: jenkins_proxy
      traefik.http.routers.jenkins_proxy.entrypoints: jenkins
      traefik.http.routers.jenkins_proxy.rule: "{{ global_proxy_rule }}"
      traefik.http.routers.jenkins_proxy.tls: "true"
  become: true
  become_user: "{{ USER_NAME }}"
