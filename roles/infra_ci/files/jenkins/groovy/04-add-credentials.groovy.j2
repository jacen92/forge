#!groovy
import jenkins.model.Jenkins;
import com.cloudbees.jenkins.plugins.sshcredentials.impl.*;
import com.cloudbees.plugins.credentials.*;
import com.cloudbees.plugins.credentials.common.*;
import com.cloudbees.plugins.credentials.impl.*;
import hudson.util.Secret;
import com.cloudbees.plugins.credentials.domains.*;
import org.jenkinsci.plugins.plaincredentials.impl.*;

def systemCredential = { instance, credential ->
    def domain = Domain.global();
    def store = instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore();

    existing_cred = CredentialsProvider.lookupCredentials(credential.class, instance).find {it.id == credential.id}
    if (existing_cred) {
        store.updateCredentials(domain, existing_cred, credential);
    } else {
        store.addCredentials(domain, credential);
    }
};

def sshCredentials = { instance, username, private_key ->
    systemCredential(
        instance = instance,
        credential = new BasicSSHUserPrivateKey(
            CredentialsScope.GLOBAL,
            "$username-ssh",
            username,
            new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(private_key),
            null,
            "$username SSH Credential"
        )
    )
};

def secretCredential = { instance, id, description, secret->
    systemCredential(
        instance = instance,
        credential = new StringCredentialsImpl(
            CredentialsScope.GLOBAL,
            id,
            description,
            Secret.fromString(secret)
        )
    )
};

def addCredential = { instance, id, description, username, password ->
    systemCredential(
        instance = instance,
        credential = new UsernamePasswordCredentialsImpl(
            CredentialsScope.GLOBAL,
            id,
            description,
            username,
            password
        )
    )
};

println "--> Configuring Credentials"
def secretVars = [:];
def credentialVars = [:];
def sshVars = [:];

{% for var, value in JENKINS_CREDENTIALS.items() %}
  {% if value.username is defined and value.password is defined %}
    println "  * Adding Credentials {{ var }}"
    credentialVars.put('{{ var }}', ['username': '{{ value.username }}', 'password':'{{ value.password }}']);
  {% elif 'PRIVATE_KEY' in value or 'PRIVATE KEY' in value %}
    println "  * Adding SSH key {{ var }}"
    sshVars.put('{{ var }}', '''{{ value }}''');
  {% elif value %}
    println "  * Adding Secret {{ var }}"
    secretVars.put('{{ var }}', '''{{ value }}''');
  {% else %}
    println "  * Skipping Secret {{ var }}"
  {% endif %}
{% endfor %}


def instance = Jenkins.getInstance();

sshVars.each { id, private_key ->
    sshCredentials(
        instance = instance,
        id = id,
        private_key = private_key
    )
};

secretVars.each { id, secret ->
    secretCredential(
        instance = instance,
        id = id,
        description = "Secret $id credential",
        secret = secret
    )
};

credentialVars.each { name, values ->
    addCredential(
        instance = instance,
        id = name,
        description = "$name credential",
        username = values['username'],
        password = values['password']
    )
};

instance.save();
