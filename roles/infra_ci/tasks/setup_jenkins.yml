- name: "Install debian packages for jenkins"
  apt:
    pkg: [ python-dev, libxml2, libxml2-dev, libxslt1-dev, libssl-dev, zlib1g-dev, python3-lxml]
    state: present
    update_cache: true
    cache_valid_time: 3600

- name: "Install pip packages for jenkins"
  pip:
    name: [python-jenkins]

- name: "Get user ID"
  shell: "id -u {{ USER_NAME }}"
  register: user_id

- name: "Set correct owner of full jenkins data directory"
  file:
    path: "/{{DATACORE}}/jenkins"
    owner: "{{ user_id.stdout }}"
    group: "{{ user_id.stdout }}"
    recurse: yes

- name: "Remove previous jenkins tmp directory"
  file:
     path: "/tmp/jenkins"
     state: absent

- name: "Clone jenkinsci"
  git:
    repo: "https://github.com/jenkinsci/docker.git"
    dest: "/tmp/jenkins"
    accept_hostkey: yes
    force: yes
    recursive: no
  become: true
  become_user: "{{ USER_NAME }}"

- name: "Use the correct base image for ARM arch"
  replace:
    path: "/tmp/jenkins/Dockerfile"
    regexp: 'FROM (.*)'
    replace: 'FROM arm32v7/openjdk:8-jre-stretch'
  when: ansible_architecture in ["armv6l", "armv7l", "aarch64"]

- name: "Build jenkins image and with buildargs"
  docker_image:
     path: "/tmp/jenkins"
     name: "jenkins"
     tag: "{{ JENKINS_VERSION }}"
     dockerfile: "Dockerfile"
     buildargs:
       JENKINS_VERSION: "{{ JENKINS_VERSION }}"
       JENKINS_SHA: "{{ JENKINS_SHA_254 }}"
       uid: "{{ user_id.stdout }}"
       gid: "{{ user_id.stdout }}"

- name: "Launch jenkins container {{ JENKINS_VERSION }}"
  docker_container:
    name: "jenkins"
    image: "jenkins:{{ JENKINS_VERSION }}"
    state: started
    restart_policy: always
    recreate: yes
    ports:
      - "{{ JENKINS_PORT }}:8080"
    labels:
      traefik.port: "8080"
      traefik.enable: "{{ JENKINS_EXPOSITION }}"
      traefik.frontend.rule: "Host:{{ JENKINS_EXTERNAL_URL }}"
    volumes:
      - "/{{ DATACORE }}/jenkins:/var/jenkins_home"

- name: "Wait for Jenkins to start up"
  uri:
    url: "http://localhost:{{ JENKINS_PORT }}"
    status_code: "200,403"
    timeout: 40
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: "{{ JENKINS_RESTART_DELAY }}"
  delay: 30
  until: >
     'status' in jenkins_service_status and
     jenkins_service_status['status'] == 200 or jenkins_service_status['status'] == 403

- name: "Create jenkins init.groovy directory"
  file:
    path: "/{{ DATACORE }}/jenkins/init.groovy.d"
    state: directory

- name: "Copy basic configuration for admin credentials"
  template:
    src: "files/jenkins/config/basic-security.groovy"
    dest: "/{{ DATACORE }}/jenkins/init.groovy.d/basic-security.groovy"
    mode: u=rw,g=r,o=r

- name: "Set isSetupComplete to avoid getting started wizard"
  lineinfile:
    path: /{{ DATACORE }}/jenkins/config.xml
    regexp: "(.*)<isSetupComplete>false</isSetupComplete>(.*)"
    line: "<isSetupComplete>true</isSetupComplete>"

- name: "Set status name to avoid getting started wizard"
  lineinfile:
    path: /{{ DATACORE }}/jenkins/config.xml
    regexp: "(.*)<name>NEW</name>"
    line: "<name>RUNNING</name>"

- name: "Set status name to avoid getting started wizard"
  lineinfile:
    path: /{{ DATACORE }}/jenkins/config.xml
    regexp: "(.*)<installStateName>(.*)</installStateName>(.*)"
    line: "<installStateName>RUNNING</installStateName>"

- name: "Create file to avoid getting started wizard"
  copy:
    content: "{{ JENKINS_VERSION }}"
    dest: "/{{ DATACORE }}/jenkins/jenkins.install.UpgradeWizard.state"
    mode: u=rw,g=r,o=r

- name: "Set master executors to 1"
  lineinfile:
    path: /{{ DATACORE }}/jenkins/config.xml
    regexp: "(.*)<numExecutors>(.*)</numExecutors>(.*)"
    line: "<numExecutors>1</numExecutors>"

- name: "Bypass - jenkins.install.InstallUtil.lastExecVersion (Hack)"
  copy:
    src: "/{{ DATACORE }}/jenkins/jenkins.install.UpgradeWizard.state"
    dest: "/{{ DATACORE }}/jenkins/jenkins.install.InstallUtil.lastExecVersion"
    remote_src: true
    mode: u=rw,g=r,o=r

- name: "Register - initialAdminPassword"
  stat:
    path: "/{{ DATACORE }}/jenkins/secrets/initialAdminPassword"
  register: jenkinsAdminPassword

- name: "Bypass - initialAdminPassword"
  shell: "mv /{{ DATACORE }}/jenkins/secrets/initialAdminPassword /root"
  when: jenkinsAdminPassword.stat.exists == True

- name: "Set correct owner of full jenkins data directory for x86_64 image"
  file:
    path: "/{{DATACORE}}/jenkins"
    owner: "{{ user_id.stdout }}"
    group: "{{ user_id.stdout }}"
    recurse: yes

- name: "Restart jenkins container"
  docker_container:
    name: jenkins
    state: started
    restart: yes

- name: "Wait for Jenkins to start up"
  uri:
    url: "http://localhost:{{ JENKINS_PORT }}"
    status_code: "200,403"
    timeout: 40
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: "{{ JENKINS_RESTART_DELAY }}"
  delay: 30
  until: >
     'status' in jenkins_service_status and
     jenkins_service_status['status'] == 200 or jenkins_service_status['status'] == 403
