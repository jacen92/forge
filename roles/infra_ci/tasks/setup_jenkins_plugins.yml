---
- name: "Get user ID"
  shell: "id -u {{ USER_NAME }}"
  register: user_id

- name: "Use python2 to avoid codec issues when installing plugins"
  set_fact:
    ansible_python_interpreter: /usr/bin/python2

# get the list of default plugins since this step is bypassed
# ll /{{ DATACORE }}/jenkins/plugins | grep jpi | tr -s ' ' | cut -d ' ' -f 9
- name: "Make sure the default plugins are always installed and up-to-date"
  jenkins_plugin:
    name: "{{ item }}"
    state: latest
    url_username: "{{ JENKINS_USER }}"
    url_password: "{{ JENKINS_PASS }}"
    url: "{{ JENKINS_URL }}"
    jenkins_home: "/{{ DATACORE }}/jenkins"
    force_basic_auth: True
    owner: "{{ user_id.stdout }}"
    group: "{{ user_id.stdout }}"
    timeout: 600
    validate_certs: "{{ JENKINS_VALIDATE_PLUGIN_CERTS }}"
  with_items:
    - ace-editor
    - antisamy-markup-formatter
    - ant
    - apache-httpcomponents-client-4-api
    - authentication-tokens
    - bouncycastle-api
    - branch-api
    - build-timeout
    - cloudbees-folder
    - command-launcher
    - credentials-binding
    - credentials
    - display-url-api
    - docker-commons
    - docker-workflow
    - durable-task
    - email-ext
    - git-client
    - github-api
    - github-branch-source
    - github
    - git
    - git-server
    - gradle
    - handlebars
    - jackson2-api
    - jquery-detached
    - jsch
    - junit
    - ldap
    - lockable-resources
    - mailer
    - mapdb-api
    - matrix-auth
    - matrix-project
    - momentjs
    - pam-auth
    - pipeline-build-step
    - pipeline-github-lib
    - pipeline-graph-analysis
    - pipeline-input-step
    - pipeline-milestone-step
    - pipeline-model-api
    - pipeline-model-definition
    - pipeline-model-extensions
    - pipeline-rest-api
    - pipeline-stage-step
    - pipeline-stage-tags-metadata
    - pipeline-stage-view
    - plain-credentials
    - resource-disposer
    - scm-api
    - script-security
    - ssh-credentials
    - ssh-slaves
    - structs
    - subversion
    - timestamper
    - token-macro
    - workflow-aggregator
    - workflow-api
    - workflow-basic-steps
    - workflow-cps-global-lib
    - workflow-cps
    - workflow-durable-task-step
    - workflow-job
    - workflow-multibranch
    - workflow-scm-step
    - workflow-step-api
    - workflow-support
    - ws-cleanup

- name: "Make sure the forge plugins are always installed and up-to-date"
  jenkins_plugin:
    name: "{{ item }}"
    state: latest
    url_username: "{{ JENKINS_USER }}"
    url_password: "{{ JENKINS_PASS }}"
    url: "{{ JENKINS_URL }}"
    jenkins_home: "/{{ DATACORE }}/jenkins"
    force_basic_auth: True
    owner: "{{ user_id.stdout }}"
    group: "{{ user_id.stdout }}"
    timeout: 600
    validate_certs: "{{ JENKINS_VALIDATE_PLUGIN_CERTS }}"
  with_items:
    - ansicolor
    - active-directory
    - badge
    - blueocean
    - build-environment
    - build-monitor-plugin
    - build-user-vars-plugin
    - build-name-setter
    - claim
    - code-coverage-api
    - conditional-buildstep
    - copyartifact
    - cppcheck
    - docker-plugin
    - downstream-ext
    - description-setter
    - diskcheck
    - disk-usage
    - extended-choice-parameter
    - extensible-choice-parameter
    - envinject
    - flexible-publish
    - gerrit-trigger
    - gerrit-code-review
    - git-parameter
    - gitlab-plugin
    - global-build-stats
    - gogs-webhook
    - groovy-postbuild
    - javadoc
    - junit-attachments
    - jobConfigHistory
    - maven-plugin
    - matrix-project
    - matrix-auth
    - multiple-scms
    - monitoring
    - nodelabelparameter
    - nexus-jenkins-plugin
    - parameterized-trigger
    - pipeline-utility-steps
    - purge-job-history
    - progress-bar-column-plugin
    - pyenv-pipeline
    - python
    - rebuild
    - run-condition
    - simple-theme-plugin
    - systemloadaverage-monitor
    - test-stability
    - tool-labels-plugin
    - warnings-ng
    - windows-slaves

- name: "Reset ansible interpreter to use python3"
  set_fact:
    ansible_python_interpreter: /usr/bin/python3

- name: "Copy theme configuration"
  template:
    src: files/jenkins/config/theme-config.xml
    dest: /{{ DATACORE }}/jenkins/org.codefirst.SimpleThemeDecorator.xml

- name: "Set correct owner of full jenkins data directory"
  file:
    path: "/{{DATACORE}}/jenkins"
    owner: "{{ user_id.stdout }}"
    group: "{{ user_id.stdout }}"
    recurse: yes

- name: "set jenkins container final state ({{ JENKINS_DEFAULT_STATE }})"
  docker_container:
    name: jenkins
    image: "jenkins:{{ JENKINS_VERSION }}"
    state: "{{ JENKINS_DEFAULT_STATE }}"
    timeout: "{{ DOCKER_TIMEOUT }}"
    recreate: yes
    restart_policy: always
    volumes:
      - "/{{ DATACORE }}/jenkins:/var/jenkins_home"
    labels:
      traefik.enable: "true"
      traefik.http.services.jenkins.loadbalancer.server.port: "8080"
      traefik.http.middlewares.https_redirect.redirectscheme.scheme: "https"
      traefik.http.routers.jenkins_http.middlewares: "https_redirect"
      traefik.http.routers.jenkins_http.rule: "Host(`{{ JENKINS_EXTERNAL_URL }}`)"
      traefik.http.routers.jenkins_http.service: jenkins
      traefik.http.routers.jenkins_https.rule: "Host(`{{ JENKINS_EXTERNAL_URL }}`)"
      traefik.http.routers.jenkins_https.service: jenkins
      traefik.http.routers.jenkins_https.tls: "true"
      # add this to use traefik as a proxy with tls (http will not be available)
      traefik.http.services.jenkins_proxy.loadbalancer.server.port: "8080"
      traefik.http.routers.jenkins_proxy.service: jenkins_proxy
      traefik.http.routers.jenkins_proxy.entrypoints: jenkins
      traefik.http.routers.jenkins_proxy.rule: "{{ global_proxy_rule }}"
      traefik.http.routers.jenkins_proxy.tls: "true"
  become: true
  become_user: "{{ USER_NAME }}"
